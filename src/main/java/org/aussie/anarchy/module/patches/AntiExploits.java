package org.aussie.anarchy.module.patches;

import org.aussie.anarchy.module.Module;
import org.aussie.anarchy.util.Util;
import org.aussie.anarchy.util.config.Config;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.FallingBlock;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.block.BlockDispenseEvent;
import org.bukkit.event.block.BlockPhysicsEvent;
import org.bukkit.event.entity.EntityPortalEvent;
import org.bukkit.event.entity.EntityTeleportEvent;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.event.player.PlayerPortalEvent;

public class AntiExploits extends Module {
    public AntiExploits() {
    }

    public boolean isEnabled() {
        return Config.ANTIEXPLOITS;
    }

    public Module onEnable() {
        return this;
    }

    @EventHandler
    private void on(PlayerDeathEvent event) {
        if (this.isEnabled()) {
            Player player = event.getEntity();
            if (player.isInsideVehicle() && player.getVehicle() != null) {
                player.getVehicle().eject();
            }

            player.getLocation().getChunk().unload(true);
        }

    }

    @EventHandler
    private void on(BlockPhysicsEvent e) {
        if (this.isEnabled()) {
            Block block = e.getBlock();
            Chunk chunk = block.getChunk();
            if (Util.countEntities(chunk.getEntities(), EntityType.FALLING_BLOCK) > Config.MAXFALLINGBLOCKS) {
                chunk.getWorld().getNearbyEntitiesByType(FallingBlock.class, block.getLocation(), Config.FALLINGBLOCKSRANGE).forEach(Entity::remove);
                e.setCancelled(true);
            }
        }

    }

    @EventHandler
    private void on(EntityTeleportEvent e) {
        if (this.isEnabled() && e.getEntity().getWorld().getEnvironment().equals(World.Environment.THE_END) && !e.getEntity().isEmpty()) {
            e.setCancelled(true);
        }

    }

    @EventHandler
    private void on(EntityPortalEvent e) {
        if (this.isEnabled() && e.getEntityType().isSpawnable() && !e.getEntityType().isAlive()) {
            e.setCancelled(true);
        }

    }

    @EventHandler
    private void on(PlayerPortalEvent e) {
        if (this.isEnabled() && (e.getPlayer().isSleeping() || e.getPlayer().isInsideVehicle())) {
            e.setCancelled(true);
        }

    }

    @EventHandler
    private void on(BlockDispenseEvent e) {
        if (this.isEnabled() && (e.getBlock().getLocation().getY() >= 255.0D || e.getBlock().getLocation().getY() <= 0.0D)) {
            e.setCancelled(true);
        }

    }
}
