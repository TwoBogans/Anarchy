package org.aussie.anarchy.module.patches;

import org.aussie.anarchy.Anarchy;
import org.aussie.anarchy.module.Module;
import org.aussie.anarchy.util.Util;
import org.aussie.anarchy.util.config.Config;
import org.bukkit.Bukkit;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.entity.*;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockDispenseEvent;
import org.bukkit.event.block.BlockPhysicsEvent;
import org.bukkit.event.entity.EntityPortalEvent;
import org.bukkit.event.entity.EntityTeleportEvent;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerPortalEvent;

import java.util.ArrayList;
import java.util.List;

public class AntiExploits extends Module {
    public AntiExploits() {
    }

    public boolean isEnabled() {
        return Config.ANTIEXPLOITS;
    }

    public Module onEnable() {
        return this;
    }

    @EventHandler
    private void on(PlayerDeathEvent event) {
        if (this.isEnabled()) {
            Player player = event.getEntity();
            if (player.isInsideVehicle() && player.getVehicle() != null) {
                player.getVehicle().eject();
            }

            player.getLocation().getChunk().unload(true);
        }

    }

    @EventHandler
    private void on(BlockPhysicsEvent e) {
        if (this.isEnabled()) {
            Block block = e.getBlock();
            Chunk chunk = block.getChunk();
            if (Util.countEntities(chunk.getEntities(), EntityType.FALLING_BLOCK) > Config.MAXFALLINGBLOCKS) {
                chunk.getWorld().getNearbyEntitiesByType(FallingBlock.class, block.getLocation(), Config.FALLINGBLOCKSRANGE).forEach(Entity::remove);
                e.setCancelled(true);
            }
        }

    }

    @EventHandler
    private void on(EntityTeleportEvent e) {
        if (this.isEnabled() && e.getEntity().getWorld().getEnvironment().equals(World.Environment.THE_END) && !e.getEntity().isEmpty()) {
            e.setCancelled(true);
        }

    }

    @EventHandler
    private void on(EntityPortalEvent e) {
        if (this.isEnabled() && e.getEntityType().isSpawnable() && !e.getEntityType().isAlive()) {
            e.setCancelled(true);
        }

    }

    @EventHandler
    private void on(PlayerPortalEvent e) {
        if (this.isEnabled() && (e.getPlayer().isSleeping() || e.getPlayer().isInsideVehicle())) {
            e.setCancelled(true);
        }

    }

    @EventHandler
    private void on(BlockDispenseEvent e) {
        if (this.isEnabled() && (e.getBlock().getLocation().getY() >= 255.0D || e.getBlock().getLocation().getY() <= 0.0D)) {
            e.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.MONITOR)
    public void onPlayerInteract(final PlayerInteractEvent event) {
        if (this.isEnabled() && Action.RIGHT_CLICK_BLOCK == event.getAction()) {
            Block clicked = event.getClickedBlock();

            if (clicked == null) return;

            if (Material.OBSIDIAN == clicked.getType() || Material.BEDROCK == clicked.getType()) {
                if (Material.END_CRYSTAL == event.getMaterial()) {

                    Anarchy.getScheduler().runTask(Anarchy.getPlugin(), () -> {
                        Chunk chunk = event.getClickedBlock().getChunk();
                        Entity[] entities = chunk.getEntities();
                        List<EnderCrystal> crystals = new ArrayList<>();

                        for (Entity entity : entities) {
                            if (EntityType.ENDER_CRYSTAL == entity.getType()) {
                                EnderCrystal crystal = (EnderCrystal) entity;
                                crystals.add(crystal);
                            }
                        }

                        if (crystals.size() > 20) {
                            for (EnderCrystal crystal : crystals) {
                                crystals.remove(crystal);
                                crystal.remove();
                            }
                        }
                    });
                }
            }
        }
    }
}
